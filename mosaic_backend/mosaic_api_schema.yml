openapi: 3.0.3
info:
  title: Tessera Mosaic
  version: 1.0.0
  description: Website for a mosaic school
paths:
  /api/auth/jwt/create/:
    post:
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/auth/jwt/refresh/:
    post:
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/jwt/verify/:
    post:
      operationId: auth_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/v1/artworks/:
    get:
      operationId: v1_artworks_list
      parameters:
      - in: query
        name: author
        schema:
          type: string
      - in: query
        name: author_type
        schema:
          type: array
          items:
            type: string
            enum:
            - student
            - teacher
        description: |-
          * `student` - student
          * `teacher` - teacher
        explode: true
        style: form
      - in: query
        name: is_on_main
        schema:
          type: boolean
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedArtworkList'
          description: ''
  /api/v1/artworks/{id}/:
    get:
      operationId: v1_artworks_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this artwork.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artwork'
          description: ''
  /api/v1/blog/:
    get:
      operationId: v1_blog_list
      parameters:
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: string
        description: defines a name for the searchfield
        explode: true
        style: form
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
  /api/v1/blog/{slug}/:
    get:
      operationId: v1_blog_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          description: defines an address where users can acess this post, for instance,
            ifthe slug is <mosaic>, the post will beaccesible at blog/mosaic
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /api/v1/blog/{slug}/related_posts/:
    get:
      operationId: v1_blog_related_posts_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          description: defines an address where users can acess this post, for instance,
            ifthe slug is <mosaic>, the post will beaccesible at blog/mosaic
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /api/v1/booking/:
    get:
      operationId: v1_booking_list
      description: |-
        Viewset for user profile and course/masterclass bookings
        that process get, post and delete requests.
        Only authorized user can book a course. For non-authorized users there is
        a redirect to the 'call me back' page (or it will be done if not yet.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookingList'
          description: ''
    post:
      operationId: v1_booking_create
      description: |-
        Viewset for user profile and course/masterclass bookings
        that process get, post and delete requests.
        Only authorized user can book a course. For non-authorized users there is
        a redirect to the 'call me back' page (or it will be done if not yet.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Booking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
  /api/v1/booking/{id}/:
    get:
      operationId: v1_booking_retrieve
      description: |-
        Viewset for user profile and course/masterclass bookings
        that process get, post and delete requests.
        Only authorized user can book a course. For non-authorized users there is
        a redirect to the 'call me back' page (or it will be done if not yet.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Booking by a registered
          user.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
    put:
      operationId: v1_booking_update
      description: |-
        Viewset for user profile and course/masterclass bookings
        that process get, post and delete requests.
        Only authorized user can book a course. For non-authorized users there is
        a redirect to the 'call me back' page (or it will be done if not yet.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Booking by a registered
          user.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Booking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
    patch:
      operationId: v1_booking_partial_update
      description: |-
        Viewset for user profile and course/masterclass bookings
        that process get, post and delete requests.
        Only authorized user can book a course. For non-authorized users there is
        a redirect to the 'call me back' page (or it will be done if not yet.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Booking by a registered
          user.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBooking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBooking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBooking'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
    delete:
      operationId: v1_booking_destroy
      description: |-
        Viewset for user profile and course/masterclass bookings
        that process get, post and delete requests.
        Only authorized user can book a course. For non-authorized users there is
        a redirect to the 'call me back' page (or it will be done if not yet.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Booking by a registered
          user.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/certificate/:
    post:
      operationId: v1_certificate_create
      description: Returns the certificate's ID among the other data
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftCert'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GiftCert'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GiftCert'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCert'
          description: ''
  /api/v1/certificate/{id}/:
    delete:
      operationId: v1_certificate_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this gift cert.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/email_form/:
    post:
      operationId: v1_email_form_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailMain'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailMain'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailMain'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMain'
          description: ''
  /api/v1/feedback/:
    post:
      operationId: v1_feedback_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Request'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
  /api/v1/main_carousel/:
    get:
      operationId: v1_main_carousel_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMainCarouselList'
          description: ''
  /api/v1/main_carousel/{id}/:
    get:
      operationId: v1_main_carousel_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this main carousel item.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainCarousel'
          description: ''
  /api/v1/masterclass_types/:
    get:
      operationId: v1_masterclass_types_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: slug
        schema:
          type: string
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMasterclassTypeList'
          description: ''
    post:
      operationId: v1_masterclass_types_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterclassType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MasterclassType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MasterclassType'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterclassType'
          description: ''
  /api/v1/masterclass_types/{slug}/:
    get:
      operationId: v1_masterclass_types_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          title: Link
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterclassType'
          description: ''
    put:
      operationId: v1_masterclass_types_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          title: Link
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterclassType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MasterclassType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MasterclassType'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterclassType'
          description: ''
    patch:
      operationId: v1_masterclass_types_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          title: Link
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMasterclassType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMasterclassType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMasterclassType'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterclassType'
          description: ''
    delete:
      operationId: v1_masterclass_types_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          title: Link
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/masterclass_types/{slug}/related_masterclasses/:
    get:
      operationId: v1_masterclass_types_related_masterclasses_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
          title: Link
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterclassType'
          description: ''
  /api/v1/masterclasses/:
    get:
      operationId: v1_masterclasses_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMasterclassList'
          description: ''
  /api/v1/masterclasses/{id}/:
    get:
      operationId: v1_masterclasses_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Masterclass.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Masterclass'
          description: ''
  /api/v1/reviews/:
    get:
      operationId: v1_reviews_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewsList'
          description: ''
  /api/v1/reviews/{id}/:
    get:
      operationId: v1_reviews_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
          description: ''
  /api/v1/school/:
    get:
      operationId: v1_school_list
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/School'
          description: ''
  /api/v1/tags/:
    get:
      operationId: v1_tags_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagReadOnlyList'
          description: ''
  /api/v1/tags/{id}/:
    get:
      operationId: v1_tags_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagReadOnly'
          description: ''
  /api/v1/users/:
    get:
      operationId: v1_users_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomUserList'
          description: ''
    post:
      operationId: v1_users_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
  /api/v1/users/{id}/:
    get:
      operationId: v1_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    put:
      operationId: v1_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    patch:
      operationId: v1_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    delete:
      operationId: v1_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/activation/:
    post:
      operationId: v1_users_activation_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /api/v1/users/email/:
    post:
      operationId: v1_users_email_create
      description: Returns an user instance by uid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UidAndToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UidAndToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UidAndToken'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UidAndToken'
          description: ''
  /api/v1/users/me/:
    get:
      operationId: v1_users_me_retrieve
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: v1_users_me_update
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: v1_users_me_partial_update
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: v1_users_me_destroy
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/my_masterclasses/:
    get:
      operationId: v1_users_my_masterclasses_retrieve
      description: Returns all masterclasses the user has booked.
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
  /api/v1/users/resend_activation/:
    post:
      operationId: v1_users_resend_activation_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/users/reset_email/:
    post:
      operationId: v1_users_reset_email_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/users/reset_email_confirm/:
    post:
      operationId: v1_users_reset_email_confirm_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /api/v1/users/reset_password/:
    post:
      operationId: v1_users_reset_password_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/users/reset_password_confirm/:
    post:
      operationId: v1_users_reset_password_confirm_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /api/v1/users/set_email/:
    post:
      operationId: v1_users_set_email_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /api/v1/users/set_password/:
    post:
      operationId: v1_users_set_password_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    Advantages:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 200
      required:
      - description
      - id
      - title
    Approach:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 200
      required:
      - description
      - id
      - title
    Artwork:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 50
        author:
          type: string
          maxLength: 50
        author_type:
          $ref: '#/components/schemas/AuthorTypeEnum'
        is_on_main:
          type: boolean
          readOnly: true
        is_for_sale:
          type: boolean
        price:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        description:
          type: string
          maxLength: 1000
        custom_ordering:
          type: integer
          readOnly: true
      required:
      - author
      - author_type
      - custom_ordering
      - id
      - is_for_sale
      - is_on_main
      - title
    AuthorTypeEnum:
      enum:
      - student
      - teacher
      type: string
      description: |-
        * `student` - student
        * `teacher` - teacher
    Booking:
      type: object
      properties:
        masterclass:
          type: integer
          title: Course/masterclass
          description: the course this guests is going to attend
      required:
      - masterclass
    CurrencyEnum:
      enum:
      - ₸
      - ₽
      - €
      type: string
      description: |-
        * `₸` - тенге
        * `₽` - рубли
        * `€` - евро
    CustomUser:
      type: object
      description: Customized user serialiser with redefined create method.
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        phone:
          type: string
          maxLength: 128
        general_agreement:
          type: boolean
        markcomm_agreement:
          type: boolean
      required:
      - email
      - general_agreement
      - id
      - markcomm_agreement
      - password
      - phone
    EmailMain:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
      required:
      - email
    GiftCert:
      type: object
      description: |-
        Expects amount, sender's name and email, recepient's name and email
        Generates a 6-symbols (digits and letters) code as the ID and sets status
        to issued.
      properties:
        amount:
          type: integer
          maximum: 32767
          minimum: 2000
        name_sender:
          type: string
          maxLength: 50
        email_sender:
          type: string
          format: email
          maxLength: 50
        name_recepient:
          type: string
          maxLength: 50
        email_recipient:
          type: string
          format: email
          maxLength: 50
      required:
      - amount
      - email_recipient
      - email_sender
      - name_recepient
      - name_sender
    MainCarousel:
      type: object
      properties:
        link:
          type: string
          title: Hyperlink
          maxLength: 200
        title:
          type: string
          title: Header on the banner
          maxLength: 50
        text:
          type: string
          title: Text on banner
          maxLength: 250
        button:
          type: string
          maxLength: 20
        order:
          type: integer
          maximum: 32767
          minimum: 0
        image:
          type: string
          readOnly: true
      required:
      - image
      - link
      - text
    Masterclass:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          readOnly: true
          title: Название
        price:
          type: integer
          readOnly: true
        currency:
          $ref: '#/components/schemas/CurrencyEnum'
        time_start:
          type: string
          format: date-time
          readOnly: true
        time_end:
          type: string
          format: date-time
          readOnly: true
        num_of_guests:
          type: integer
          readOnly: true
      required:
      - id
      - num_of_guests
      - price
      - time_end
      - time_start
      - title
    MasterclassType:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 50
        slug:
          type: string
          readOnly: true
          title: Link
          pattern: ^[-a-zA-Z0-9_]+$
        max_guests:
          type: integer
          readOnly: true
          title: Max number of guests
        duration:
          type: integer
          readOnly: true
          title: How many hours required to finish the masterclass
        short_description:
          type: string
          readOnly: true
        full_description:
          type: string
          readOnly: true
        image:
          type: string
          readOnly: true
        masterclasses:
          type: array
          items:
            $ref: '#/components/schemas/Masterclass'
          readOnly: true
      required:
      - duration
      - full_description
      - id
      - image
      - masterclasses
      - max_guests
      - short_description
      - slug
      - title
    PaginatedArtworkList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Artwork'
    PaginatedBookingList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
    PaginatedCustomUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CustomUser'
    PaginatedMainCarouselList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MainCarousel'
    PaginatedMasterclassList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Masterclass'
    PaginatedMasterclassTypeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MasterclassType'
    PaginatedReviewsList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Reviews'
    PaginatedTagReadOnlyList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TagReadOnly'
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedBooking:
      type: object
      properties:
        masterclass:
          type: integer
          title: Course/masterclass
          description: the course this guests is going to attend
    PatchedCustomUser:
      type: object
      description: Customized user serialiser with redefined create method.
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        phone:
          type: string
          maxLength: 128
        general_agreement:
          type: boolean
        markcomm_agreement:
          type: boolean
    PatchedMasterclassType:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 50
        slug:
          type: string
          readOnly: true
          title: Link
          pattern: ^[-a-zA-Z0-9_]+$
        max_guests:
          type: integer
          readOnly: true
          title: Max number of guests
        duration:
          type: integer
          readOnly: true
          title: How many hours required to finish the masterclass
        short_description:
          type: string
          readOnly: true
        full_description:
          type: string
          readOnly: true
        image:
          type: string
          readOnly: true
        masterclasses:
          type: array
          items:
            $ref: '#/components/schemas/Masterclass'
          readOnly: true
    PatchedUser:
      type: object
      properties:
        phone:
          type: string
          maxLength: 128
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          description: defines an address where users can acess this post, for instance,
            ifthe slug is <mosaic>, the post will beaccesible at blog/mosaic
          maxLength: 80
        title:
          type: string
          description: Post`s title
          maxLength: 80
        read_time:
          type: integer
          maximum: 32767
          minimum: 1
          description: Approximate time that is reqired to read the article
        preview_text:
          type: string
          maxLength: 400
        text:
          type: string
        pub_date:
          type: string
          format: date-time
          readOnly: true
          title: Publication date
        author:
          type: string
          readOnly: true
        image:
          type: string
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagReadOnly'
      required:
      - author
      - id
      - image
      - preview_text
      - pub_date
      - slug
      - tags
      - text
      - title
    Questions:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question:
          type: string
          maxLength: 100
        answer:
          type: string
          maxLength: 150
      required:
      - answer
      - id
      - question
    Request:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
        phone_num:
          type: string
          maxLength: 25
        comment:
          type: string
          maxLength: 150
        contact_consent:
          type: boolean
      required:
      - contact_consent
      - name
      - phone_num
    Reviews:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        student_name:
          type: string
          maxLength: 20
        photo:
          type: string
          format: uri
        title:
          type: string
          maxLength: 100
        review:
          type: string
          maxLength: 450
        pub_date:
          type: string
          format: date
      required:
      - id
      - pub_date
      - review
      - student_name
    School:
      type: object
      properties:
        name:
          type: string
          title: 'School name '
          description: Add or change the school name
          maxLength: 20
        logo:
          type: string
          format: uri
        full_description:
          type: string
          maxLength: 500
        short_description:
          type: string
          maxLength: 300
        address_text:
          type: string
          maxLength: 50
        address_link:
          type: string
          maxLength: 150
        working_hours:
          type: string
          maxLength: 50
        phone:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 50
        facebook_link:
          type: string
          maxLength: 150
        tg_link:
          type: string
          maxLength: 150
        instagram_link:
          type: string
          maxLength: 150
        advantages:
          type: array
          items:
            $ref: '#/components/schemas/Advantages'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Questions'
        approach:
          type: array
          items:
            $ref: '#/components/schemas/Approach'
      required:
      - address_link
      - address_text
      - advantages
      - approach
      - email
      - facebook_link
      - full_description
      - instagram_link
      - name
      - phone
      - questions
      - short_description
      - tg_link
      - working_hours
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 254
      required:
      - current_password
      - new_email
    TagReadOnly:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          description: how the tag is named
          maxLength: 50
        slug:
          type: string
          description: defines a name for the searchfield
          maxLength: 50
      required:
      - id
      - slug
      - title
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UidAndToken:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    User:
      type: object
      properties:
        phone:
          type: string
          maxLength: 128
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
      required:
      - email
      - id
      - phone
    UsernameResetConfirm:
      type: object
      properties:
        new_email:
          type: string
          format: email
          title: Email
          maxLength: 254
      required:
      - new_email
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
